#!@PERL@

# Wrapper to run pve with all the various options.
#
# Authors: Claude Lepage <claude@bic.mni.mcgill.ca>
#
# July 2015
#
# Copyright Alan C. Evans
# Professor of Neurology
# McGill University
#

use strict;
use warnings "all";
use POSIX;
use MNI::Startup;
use Getopt::Tabular;
use MNI::Spawn;
use MNI::DataDir;
use MNI::FileUtilities qw(check_output_dirs);

my $help = <<HELP;

This is $ProgramName. It is essentially a wrapper around
the pve/pve3 programs that automatically determines which of
these 2 programs you would like to run based on the \# of
input files and also includes a subcortical class in the
classification if the '-subcortical' option is specified, among
other things. Several masks can be given to specify the region
to classify (typically full head), the region from where to 
evaluate the thresholds (typically brain mask), and the region 
to exclude from the thresholds (typically cerebellum and
brainstem).

The -mask mask.mnc should be the head mask, including skull,
cerebellum and brainstem. The pve classes will be defined 
within thin mask on output.

The -restrict restrict.mnc should be the skull_mask.mnc 
generated by mincbet. The thresholds (mean/variance) for 
the tissue classes will be evaluated inside this mask. 
It is not critical that this mask be perfect. Bits of 
cortex may be missing or pieces of skull may be attached.

If -noncortical_mask mask_noncort.mnc is given, the cerebellum
and brainstem will be removed from the restrict mask so that
the thresholds will not be evaluated in the cerebellum and
the brainstem. Sub-cortical regions are still included in 
the restrict mask.

If -subcortical_mask mask_sc.mnc is given, pve will generate
and extra tissue class SC for sub-cortical gray, within the
region specified by this mask. There will be no SC class outside
this mask, but there can be GM inside this region. This mask
is defined on the stereotaxic model, so one must apply the 
inverse transformation nl.xfm to tranform to the subject.

HELP

my $license = <<LICENSE;
Copyright Alan C. Evans
Professor of Neurology
McGill University

LICENSE

my $usage = <<USAGE;
Usage:
       $ProgramName [options] t1.mnc [t2.mnc] [pd.mnc] pve_prefix
       $ProgramName -help to list options

$license
USAGE

Getopt::Tabular::SetHelp ($help, $usage);

# ===== Global Variables =====

my $subcortical_mask = undef;
my $noncortical_mask = undef;
my $mask = undef;
my $restrict = undef;
my $nlxfm = undef;
my $cls_clean = undef;
my $tags = undef;
my $curvature = undef;
my $iterate = 0;
my $classify = 0;

# ===== Argument Processing =====

my @leftOverArgs;
my @argTbl = (
     @DefaultArgs,
     ["-mask", "string", 1, \$mask,
      "mask for computing the pve classes (default full field of view)", "<mask.mnc>"],
     ["-noncortical_mask", "string", 1, \$noncortical_mask,
      "mask for ventricles, brainstem, cerebellum and sub-cortical GM (default none)", 
      "<mask_noncort.mnc>"],
     ["-subcortical_mask", "string", 1, \$subcortical_mask,
      "mask for sub-cortical GM on the model's template (default none)", "<mask_sc.mnc>"],
     ["-restrict", "string", 1, \$restrict,
      "mask inside which to evaluate the pve thresholds (default mask.mnc)", "<restrict.mnc>"],
     ["-nlxfm", "string", 1, \$nlxfm,
      "non-linear transformation from subject to stereotaxic model, used for transforming the subcortical mask (default identity)", 
      "<nl.xfm>"],
     ["-curve", "string",1, \$curvature,
      "specify a curvature volume (optional) or \"auto\" (requires -image option)","<curvature.mnc>"],
     ["-image", "string",1, \$cls_clean,
      "specify a classified volume (required)","<classified.mnc>"],
     ["-tags", "string",1, \$tags,
      "specify a tag file instead of cls_clean","<nobg.tag>"],
     ['-iterate','boolean', 1, \$iterate,
      'iteratively correct the mean and variance of tissue types'],
     ['-classify','boolean', 1, \$classify,
      'Provide a final classified image based on partial volume contents (BG,CSF,GM,WM,SC)'],
     );

GetOptions(\@argTbl, \@ARGV, \@leftOverArgs) or die "\n";

my $pve_prefix = pop @leftOverArgs or die $usage;
my @inputs = @leftOverArgs or die $usage;

# register the programs
RegisterPrograms(["pve", "pve3", "pve_curvature", "minccalc", 
                  "mincresample", "cp" ]);

AddDefaultArgs("minccalc", ["-quiet"]);
AddDefaultArgs("mincresample", ["-quiet"]);

# Check for version of pve to use.
my $pve = undef;
if( $#inputs+1 == 1 ) {
  $pve = "pve";
} else {
  if( $#inputs+1 == 3 ) {
    $pve = "pve3";
  } else {
    die "Wrong number of input images to pve.";
  }
}
if ($Clobber) {
    AddDefaultArgs($pve, ["-clobber"]);
}

# create necessary tmp directory
check_output_dirs($TmpDir);

# Create a dummy mask over the entire field of view if none is provided.
# This mask defines where the tissue classes will be created.
if( !defined( $mask ) ) {
  $mask = "${TmpDir}/pve_mask.mnc";
  Spawn(["minccalc", "-clobber", "-unsigned", "-byte", 
         "-expression", "1", $inputs[0], $mask]);
} else {
  Spawn(["mincresample", "-clobber", '-unsigned', '-byte', '-nearest',
         '-like', $inputs[0], $mask, "${TmpDir}/pve_mask.mnc" ]);
  $mask = "${TmpDir}/pve_mask.mnc";
}

# Use the $mask if none is provided. This mask defines where the mean and 
# variance of the tissue classes will be evaluated.
if( !defined( $restrict ) ) {
  $restrict = "${TmpDir}/pve_restrict.mnc";
  Spawn(["cp", "-f", $mask, $restrict]);
} else {
  # If a restrict mask is specified, check to remove the cerebellum and
  # brainstem. Otherwise, don't bother.
  # Note: noncortical_mask is already in subject space.
  # noncortical_mask (everything that does not strictly include cortex):
  #   0 = ignore
  #   1 = some partial sub-cortical GM+WM around ventricles (incomplete SC)
  #   2 = brainstem+cerebellum
  #   3,6,7 = ventricles
  #   4 = amygdala
  #   5 = hippocampus

  if( defined( $noncortical_mask ) && ( -e $noncortical_mask ) ) {
    Spawn(["minccalc", "-clobber", "-expression", 
           "if( abs(A[1]-2)<0.5 ){0}else{A[0]}", 
           $restrict, $noncortical_mask, "${TmpDir}/pve_restrict.mnc"]);
    $restrict = "${TmpDir}/pve_restrict.mnc";
  }
}

# transform subcortical_mask to subject space.
my @extraPVE;
if( defined( $subcortical_mask ) && ( -e $subcortical_mask ) ) {
  Spawn(["mincresample", "-clobber", '-unsigned', '-byte',
         "-like", $inputs[0], "-transform", $nlxfm,
         "-nearest", "-invert", $subcortical_mask, 
         "${TmpDir}/pve_subcortical_mask.mnc"]);
  $subcortical_mask = "${TmpDir}/pve_subcortical_mask.mnc";
  push @extraPVE, "-subcortical";
  push @extraPVE, $subcortical_mask;
} else {
  $subcortical_mask = undef;
}

# Compute "curvatures" (derivatives) to provide extra weight for
# burried CSF in sulci.

if( defined( $curvature ) ) {
  if( $curvature eq "auto" ) {
    if( defined( $cls_clean ) ) {
      $curvature = "${TmpDir}/pve_curvature_tmp";   # filename prefix
      Spawn(['pve_curvature', '-clobber', $inputs[0], $cls_clean,
             $mask, $curvature]);
      $curvature .= "_cg.mnc";   # filename extension
    } else {
      print "Warning: classify_clean image must exist to use option " .
            "-curve auto. Option is ignored with tag points."
    }
  } 
  push @extraPVE,"-curve";
  push @extraPVE,$curvature;
}

if( $iterate ) {
  push @extraPVE, "-est_params";
}

if( $iterate || $#inputs+1 == 3 ) {
  push @extraPVE, "-iterations";
  push @extraPVE, "30";
}

if( defined( $cls_clean ) ) {
  push  @extraPVE, "-image";
  push  @extraPVE, $cls_clean;
} else {
  if( defined( $tags ) ) {
    push  @extraPVE, "-tags";
    push  @extraPVE, $tags;
  } else {
    die "Error: You must specify -image or -tags to run pve.";
  }
}

if( $classify ) {
  push @extraPVE, "-classify";
}

Spawn( [$pve, @extraPVE, "-mask", $mask, "-restrict", $restrict,
        @inputs, $pve_prefix]);

unlink( "${TmpDir}/pve_mask.mnc" ) if( -e "${TmpDir}/pve_mask.mnc" );
unlink( "${TmpDir}/pve_restrict.mnc" ) if( -e "${TmpDir}/pve_restrict.mnc" );
unlink( "${TmpDir}/pve_subcortical_mask.mnc" ) if( -e "${TmpDir}/pve_subcortical_mask.mnc" );
unlink( "${TmpDir}/pve_curvature_tmp_cg.mnc" ) if( -e "${TmpDir}/pve_curvature_tmp_cg.mnc" );

