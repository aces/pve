#!@PERL@

#
# Copyright Alan C. Evans
# Professor of Neurology
# McGill University
#

use strict;
use warnings "all";

use MNI::Startup;
use MNI::FileUtilities;
use MNI::Spawn;
use Getopt::Tabular;
use File::Basename; 


my $help = <<HELP;

This is 'pve_script.pl'  It is essentially a wrapper around
the pve/pve3 programs that automatically determines which of
these 2 programs you would like to run based on the \# of
input files and also includes a subcortical class in the
classification if the '-subcortical' option is specified, among
other things.  If you would like to use a subcortical volume other 
than the default you can call one of the binaries directly with a
'-subcortical <file.mnc>' flag.

HELP

my $license = <<LICENSE;
Copyright Alan C. Evans
Professor of Neurology
McGill University

LICENSE

my $usage = <<USAGE;
usage: 
       $ProgramName [options] input.mnc output_prefix -mask <mask.mnc> -image <classified.mnc>
       $ProgramName -help to list options

$license
USAGE

Getopt::Tabular::SetHelp ($help, $usage);

my $vol_classified = undef; 
my $vol_curvature = undef;
my $vol_mask = undef;
my $use_subcort = 1;
my $t1_tal_nl_xfm = undef;
my $iterate = 0;
my $zip_files = 0;
my $clobber = 0;

# NOTE: This is an old mask for the sub-cortical brain structures. It 
# should be regenerated using the new ICBM152 model.
use FindBin;
my $sc_volume = "$FindBin::Bin/../share/@PACKAGE@/gipt.mnc";
my $pve;
my @pve_ops;

my @options = (["-mask", "string", 1, \$vol_mask,
		"specify a mask volume (required)", "<mask.mnc>"],
	       ["-curve", "string",1, \$vol_curvature,
		"specify a curvature volume (optional)","<curvature.mnc>"],
	       ["-image", "string",1, \$vol_classified,
		"specify a classified volume (required)","<classified.mnc>"],
	       ['-subcortical|-nosubcortical','boolean', 1, \$use_subcort,
		'use subcortical tissue class [default]'],
	       ["-transform", "string",1, \$t1_tal_nl_xfm,
		"non-linear transformation to map the subcortical tissue mask from stereotaxic space to subject","<t1_tal_nl.xfm>"],
	       ['-iterate','boolean', 1, \$iterate,
		'iteratively correct the mean and variance of tissue types'],
	       ['-zip|-nozip','boolean',1, \$zip_files,
		'gzip the outputted files [default: -nozip]'],
	       ['-clobber|-noclobber','boolean',1,\$clobber,
		'clobber output files if the exist [default: -noclobber]']
	      );

GetOptions( \@options, \@ARGV ) || exit 1;

RegisterPrograms(['pve','pve3','mincresample','gzip']);

if ( @ARGV == 2 ){
  $pve = "pve";
}
elsif ( @ARGV == 4) {
  $pve = "pve3";
}
else {
  die "$usage";
}

# These are temporary files.
MNI::FileUtilities::check_output_path("${TmpDir}") or exit 1;

if (!defined($vol_mask) || !defined($vol_classified)) {
  die "$usage";
}
my $vol_mask_rsl = "${TmpDir}/pve_vol_mask_rsl.mnc";
Spawn(['mincresample', '-clobber', '-quiet', '-unsigned', '-byte',
       '-like', $vol_classified, '-nearest', $vol_mask, $vol_mask_rsl]);

my $outpref = pop @ARGV;
my @invols = @ARGV;
my @outfiles = ("${outpref}_disc.mnc","${outpref}_exactwm.mnc", "${outpref}_exactgm.mnc","${outpref}_exactcsf.mnc");

if (defined($vol_curvature)) {
  push @pve_ops,"-curve";
  push @pve_ops,$vol_curvature;
}

if ($use_subcort) {
  my $sc_volume_tmp = $sc_volume;
  # Apply non-linear transformation to sub-cortical mask to map it to subject.
  if( defined($t1_tal_nl_xfm) ) {
    $sc_volume_tmp = "${TmpDir}/sc_volume_resampled.mnc";
    Spawn(['mincresample', "-like", $vol_classified, "-nearest_neighbour",
           "-transform", $t1_tal_nl_xfm, "-invert", $sc_volume, $sc_volume_tmp]);
  }
  push @pve_ops,"-subcortical";
  push @pve_ops,$sc_volume_tmp;
  push @outfiles,"${outpref}_exactsc.mnc";
}

if ($iterate) {
  push @pve_ops,"-est_params";
}

if ($clobber) {
  push @pve_ops,"-clobber";
}


Spawn([$pve,@invols,$outpref,"-mlonly","-mask",$vol_mask_rsl,"-image",$vol_classified,@pve_ops]);
unlink( $vol_mask_rsl );

if ($zip_files) {

  Spawn(["gzip",@outfiles]);

}
