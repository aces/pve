#!@PERL@

#
# Copyright Alan C. Evans
# Professor of Neurology
# McGill University
#

use strict;
use warnings "all";
use POSIX;
use Getopt::Tabular;
use File::Basename;
use File::Temp qw/ tempdir /;

my($Help, $Usage, $License, $me);
my(@opt_table, %opt );

$me = &basename($0);
%opt = (
   'verbose'   => 1,
   'clobber'   => 0,
   );

@opt_table = (
   ["-verbose", "boolean", 0, \$opt{verbose},
      "be verbose" ],
   ["-clobber", "boolean", 0, \$opt{clobber},
      "clobber existing files" ]
);

&CreateInfoText;

GetOptions( \@opt_table, \@ARGV )
  or exit 1;

my $numargs = @ARGV;

if( $numargs != 4 )  {
    warn $Usage;
    die "Incorrect number of arguments\n";
}

# define input variables:

my $spect = $ARGV[0];
my $class = $ARGV[1];
my $mask = $ARGV[2];
my $output = $ARGV[3];  # file prefix
$output .= "_cg.mnc";

my @clobber_opt;
if ($opt{clobber}) {
    push @clobber_opt,"-clobber";
}
if (-e $output && !$opt{clobber} ) {
    print "Output file $output exists and -clobber not specified\n";
    die "Output file $output exists and -clobber not specified\n";
}

my $temp_dir = &tempdir( "$me-XXXXXXXX", TMPDIR => 1, CLEANUP => 1 );

my $white = "$temp_dir/white.mnc";
my $white20 = "$temp_dir/white20.mnc";
my $chamf = "$temp_dir/chamf.mnc";
my $gradx = "$temp_dir/dx.mnc";
my $grady = "$temp_dir/dy.mnc";
my $gradz = "$temp_dir/dz.mnc";
my $dxyz ="$temp_dir/dxyz.mnc";
my $smooth = "$temp_dir/smooth.mnc";
my $smoothlt0m3 = "$temp_dir/grad.mnc";
my $blurpref = "$temp_dir/temp";
my $blur = "$temp_dir/temp_blur.mnc";
my $curvepref = "$temp_dir/temp";
my $curve = "$temp_dir/temp_k1.mnc";
my $curvelt0 = "$temp_dir/curve.mnc";

my $dx = `mincinfo -attvalue xspace:step $class`; chomp( $dx );
my $dy = `mincinfo -attvalue yspace:step $class`; chomp( $dy );
my $dz = `mincinfo -attvalue zspace:step $class`; chomp( $dz );

my $kerndx = "$temp_dir/dx.kern";
my $kerndy = "$temp_dir/dy.kern";
my $kerndz = "$temp_dir/dz.kern";
&CreateKernelFiles( $dx, $dy, $dz );

######create the gradient volume#####

# must apply a brain mask to classification to retain only cerebrum white matter (no skull)
&run( "minccalc","-quiet","-expression", 'if(abs(A[0]-3)<0.5&&A[1]>0.5){1}else{0}',
      $class, $mask, $white );
&run( 'mincdefrag', $white, $white, 1, 6 );

# The purpose of the 1-layer erosion inside white is to avoid boundary
# effects of the gradient of the chamfer map at the gm-wm border. This
# will be masked off later.
&run( 'dilate_volume', $white, $white, 0, 6, 1 );

# Compute a distance transform from WM. Assume that the burried sulcal csf 
# will be mid-way in the white matter sulci. Assign a weight to that region 
# as a possibility of having csf. This weight is used in the -curve argument 
# of pve.
# Note: use max_dist=20mm to avoid conflicts with boundaries of the field
#       of view. 20mm should be enough but not too much.

my $chamf_dist = 20;
&run( "mincreshape", '-quiet', "-image_range", 0, $chamf_dist, $white, $white20 );
&run( "mincchamfer", '-max_dist', $chamf_dist, $white20, $chamf );
unlink( $white20 );

#derivatives of the distance transform are taken and a
#derivative magnitude volume is created. (Note that this
#procedure is NOT equivalent to use make_gradient_volume from
#conglomerate.)

my $chamf_dist_m1 = $chamf_dist - 1;
&run( "mincmorph","-convolve","-kern",$kerndx,$chamf,$gradx );
&run( "mincmorph","-convolve","-kern",$kerndy,$chamf,$grady );
&run( "mincmorph","-convolve","-kern",$kerndz,$chamf,$gradz );
&run( "minccalc",'-quiet', "-expression", 
      "if(A[3]<$chamf_dist_m1){clamp(sqrt(A[0]^2+A[1]^2+A[2]^2),0,2)}else{2}",
      $gradx, $grady, $gradz, $chamf, $dxyz );
unlink( $chamf );
unlink( $gradx );
unlink( $grady );
unlink( $gradz );
unlink( $kerndx );
unlink( $kerndy );
unlink( $kerndz );

# Geometric smoothing is performed to remove noise and increase the 
# width of the areas where we expect find CSF. dt=0.1 and N=4 will 
# be adjusted inside geo_smooth to satisfy the stability condition
# based on the voxel size.

&run( "geo_smooth", 0.1, 4, $dxyz, $smooth );
unlink( $dxyz );

# remove some noisy voxels from the grad image, and convert to a value
# useful to the pve.
&run( "minccalc", '-quiet', "-expression", 
      'if(A[1]<0.5){ if (A[0] > 1){0}else{3*(A[0]-1);}} else 0',
      $smooth, $white, $smoothlt0m3 );
unlink( $smooth );

# create the curvature volume after blurring the input image
&run( "mincblur", '-quiet', '-no_apodize', "-fwhm", 4, $spect, $blurpref );
&run( "make_curvature_volume", $blur, $curvepref );
&run( "minccalc", '-quiet', "-expression", 'if (A[0] < 0) A[0] else 0',
      $curve, $curvelt0 );
unlink( $blur );

# dilate white matter by 1mm to exclude the border between gm and wm
# for curve_cg. Add 1 layer because white was previously eroded 1 layer.
my $ndil = 1 + ceil( 1.0 / $dx );  # assume dx=dy=dz
&run( 'dilate_volume', $white, $white, 1, 6, $ndil );  # 1mm dilation

# create the combination grad+curve volume used for pve and mask out non GM/CSF
&run( "minccalc",'-quiet', @clobber_opt, "-expression", 
      'if(A[2]<0.5){A[0]+0.5*A[1]}else{0}',
      $curvelt0, $smoothlt0m3, $white, $output );

unlink( $curvelt0 );
unlink( $smoothlt0m3 );
unlink( $white );

sub CreateInfoText
{
  $License = <<LICENSE;
Copyright Alan C. Evans
Professor of Neurology
McGill University

LICENSE

  $Usage = <<USAGE;
usage:
       $me [options] t1_image.mnc classified.mnc mask.mnc output_pref
       $me -help to list options

$License
USAGE
  
  $Help = <<HELP;
  
$me takes an intensity image, a classified image and a mask
as input and generates an image representing the degree to which
the pve/pve3 classifiers should be biased to finding CSF through
the modulation of a Markovian Random Field.
HELP

   Getopt::Tabular::SetHelp ($Help, $Usage);
}

#Create the kernel files used in taking the image derivative
sub CreateKernelFiles {

  my $dx = shift;
  my $dy = shift;
  my $dz = shift;
 
  my $xfactor = 0.5/$dx;
  open DXFILE, "> $kerndx";
  print DXFILE "MNI Morphology Kernel File\n";
  print DXFILE "Kernel_Type = Normal_Kernel;\n";
  print DXFILE "Kernel =\n";
  print DXFILE "  -1.0  0.0  0.0  0.0  0.0     -${xfactor}\n";
  print DXFILE "   1.0  0.0  0.0  0.0  0.0      ${xfactor};\n";
  close DXFILE;

  my $yfactor = 0.5/$dy;
  open DYFILE, "> $kerndy";
  print DYFILE "MNI Morphology Kernel File\n";
  print DYFILE "Kernel_Type = Normal_Kernel;\n";
  print DYFILE "Kernel =\n";
  print DYFILE "   0.0 -1.0  0.0  0.0  0.0     -${yfactor}\n";
  print DYFILE "   0.0  1.0  0.0  0.0  0.0      ${yfactor};\n";
  close DYFILE;

  my $zfactor = 0.5/$dz;
  open DZFILE, "> $kerndz";
  print DZFILE "MNI Morphology Kernel File\n";
  print DZFILE "Kernel_Type = Normal_Kernel;\n";
  print DZFILE "Kernel =\n";
  print DZFILE "   0.0  0.0 -1.0  0.0  0.0     -${zfactor}\n";
  print DZFILE "   0.0  0.0  1.0  0.0  0.0      ${zfactor};\n";
  close DZFILE;

}

#Execute a system call.

sub run {
  print "@_\n";
  system(@_)==0 or die "Command @_ failed with status: $?";
}


