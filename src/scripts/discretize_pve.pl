#!xPERLx -w

# takes PVE input (three different maps) and returns a discretized
# classification image.

use strict;

use MNI::Startup;
use MNI::Spawn;
use Getopt::Tabular;

# global variables
my ($Help, $Usage);
my ($csf, $wm, $gm, $sc, $output);

$, = ' ';     # set output field separator

# First, announce ourselves to stdout (for ease in later dissection
# of log files) -- unless STDOUT is a tty.
self_announce if $Verbose;

# Set defaults for the global variables.
$Verbose      = 1;
$Execute      = 1;
$Clobber      = 0;
$KeepTmp      = 0;

my $sctowm       = 0;

&CreateInfoText;

my(@argTbl) = (
	       @DefaultArgs,
	       ["-sctowm|-nosctowm",'boolean',1,\$sctowm,
	       'convert subcortical tissue to white matter [default: -nosctowm]']
	      );

my(@leftOverArgs);

GetOptions (\@argTbl, \@ARGV, \@leftOverArgs) || die "\n";

my $numargs = @leftOverArgs;

if (($numargs != 4)&&($numargs != 5))  {
    warn $Usage;
    die "Incorrect number of arguments\n";
}

$csf = shift @leftOverArgs;
$wm = shift @leftOverArgs;
$gm = shift @leftOverArgs;

if ($numargs == 5) {
  $sc = shift @leftOverArgs;
}

$output = shift @leftOverArgs;

if (-e $output && !$Clobber) {
    die "Output file $output exists and -clobber not specified\n";
}

RegisterPrograms(["minccalc"]);
AddDefaultArgs('minccalc', ['-clobber']) if ($Clobber);

if ($numargs == 4) {
  Spawn(['minccalc', '-expression' ,'if (A[0] > A[1] && A[0] > A[2]) 1 else if (A[1] > A[2]) 2 else if (A[2] > 0) 3 else 0', $csf, $gm, $wm, $output]);
}
elsif ($sctowm) {
  Spawn(['minccalc','-expression','if (A[0] > A[1] && A[0] > A[2] && A[0] > A[3]) 1 else if (A[1] > A[2] && A[1] > A[3]) 2 else if (A[2] > 0 || A[3] > 0) 3 else 0',
	 $csf,$gm,$wm,$sc,$output]);
}
else {
  Spawn(['minccalc','-expression','if (A[0] > A[1] && A[0] > A[2] && A[0] > A[3]) 1 else if (A[1] > A[2] && A[1] > A[3]) 2 else if (A[2] > A[3]) 3 else if (A[3] > 0) 4 else 0',
	 $csf,$gm,$wm,$sc,$output]);
}

# create the help messages and such
sub CreateInfoText
{
    $Usage = <<USAGE;
Usage: $ProgramName [options] <pve_csf.mnc> <pve_wm.mnc> <pve_gm.mnc> [<pve_sc.mnc>] <output.mnc>
       $ProgramName -help for details
USAGE

    $Help = <<HELP;

$ProgramName takes the three partial volume maps generated by pve or
pve3 and turns them into a discretely classified volume based on
finding the tissue type wioth the maximum PV estimate at each voxel.
HELP

   Getopt::Tabular::SetHelp ($Help, $Usage);
}
